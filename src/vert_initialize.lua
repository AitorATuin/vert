#!/usr/bin/env lua

local utils = require("utils")
local lfs   = require("lfs")

local luajit_installer = Installable.new({
  uri = "http://luajit.org/download/",
  filename = "LuaJIT-%s.tar.gz",
  make_tasks = {
    { command = "make %s PREFIX=%s", "platform", "prefix" },
    { command = "make install PREFIX=%s", "prefix" }
  }
})

local lua_installer = Installable.new({
  uri = "http://www.lua.org/ftp/",
  filename = "lua-%s.tar.gz",
  make_tasks = {
    { command = "make %s", "platform" },
    { command = "make install INSTALL_TOP=%s", "prefix" }
  }
})

local luarocks_installer = Installable.new({
  uri       = "http://luarocks.org/releases/",
  filename  = "luarocks-%s.tar.gz",
  make_tasks = {
    { command = "./configure --prefix=%s --sysconfdir=%s --force-config --with-lua=%s", "prefix", "prefix", "prefix" },
    { command = "make" },
    { command = "make install" }
  }
})

function M.write_activate_script(template, lua_version, prefix)
  local activate_file, err = io.open(prefix.."/bin/activate", "w+")

  if not activate_file then
    print("Failed to open activate file: "..err)
    os.exit(3)
  end

  activate_file:write(string.format(template, lua_version, prefix))
  activate_file:close()
end

function M.init(opts)
  local lfs     = require("lfs")
  local utils   = require("utils")

  local help = [[usage: vert [--luarocks-version[ [--lua-version]
                             [--lua-implimentation] [--platform] <directory>

  --luarocks-version : luarocks version to install
  --lua-version : lua version to compile
  --lua-implimentation : lua implimentation to compile [lua | luajit]
  --platform : platform to compile to default is "linux"
  ]]

  local activate_template = [=[
  # This is a wholesale copy of the activate command generated by `virtualenv`[1]
  # Many thanks to go Ian Bicking and that team for making such a fine piece of
  # software That I find it necessary to build myself similar tools for lua.  This
  #
  # [1] http://www.virtualenv.org/
  #
  # file must be used with "source bin/activate" *from your shell* you cannot run
  # it directly

  deactivate () {
      if [[ -n "$_OLD_VERT_PATH" ]]
      then
          PATH=$_OLD_VERT_PATH
          export PATH
          unset _OLD_VERT_PATH
      fi

      if [[ -n "$_OLD_VERT_PS1" ]]
      then
          PS1=$_OLD_VERT_PS1
          export PS1
          unset _OLD_VERT_PS1
      fi

      if [[ -n "$_OLD_LUA_PATH" ]]
          LUA_PATH=$_OLD_VERT_LUA_PATH
          export LUA_PATH
          unset _OLD_VERT_LUA_PATH
      then
          unset LUA_PATH
      fi

      if [[ -n "$_OLD_LUA_CPATH" ]]
          LUA_CPATH=$_OLD_VERT_LUA_CPATH
          export LUA_CPATH
          unset _OLD_VERT_LUA_CPATH
      then
          unset LUA_CPATH
      fi

      unset LUA_VERSION
      unset VERT

      # This should detect bash and zsh, which have a hash command that must
      # be called to get it to forget past commands.  Without forgetting
      # past commands the $PATH changes we made may not be respected
      if [[ -n "$BASH" ]] || [[ -n "$ZSH_VERSION" ]]
      then
          hash -r
      fi

      if [ ! "$1" = "nondestructive" ]
      then
          # Self destruct!
          unset -f deactivate
      fi
  }

  deactivate nondestructive

  LUA_VERSION="%s"
  VERT="%s"

  export LUA_VERSION
  export VERT

  if [[ -z "$VERT_DISABLE_PROMPT" ]]
  then
      _OLD_VERT_PS1="$PS1"
      export _OLD_VERT_PS1

      if [[ "x" != x ]]
      then
          PS1="$PS1"
      else
          PS1="(`basename \"$VERT\"`)$PS1"
      fi

      export PS1
  fi


  if [[ -n "$LUA_PATH" ]]
  then
      _OLD_VERT_LUA_PATH=$LUA_PATH
      export _OLD_VERT_LUA_PATH
  fi

  if [[ -n "$LUA_CPATH" ]]
  then
      _OLD_VERT_LUA_CPATH=$LUA_CPATH
      export _OLD_VERT_LUA_CPATH
  fi

  if [[ -n "$PATH" ]]
  then
      _OLD_VERT_PATH=$PATH
      export _OLD_VERT_PATH
  fi

  LUA_PATH="./?.lua;$VERT/share/lua/$LUA_VERSION/?.lua;$VERT/share/lua/$LUA_VERSION/?/init.lua;$VERT/lib/lua/$LUA_VERSION/?.lua;$VERT/lib/lua/$LUA_VERSION/?/init.lua"
  LUA_CPATH="./?.so;$VERT/lib/lua/$LUA_VERSION/?.so;$VERT/lib/lua/$LUA_VERSION/loadall.so"
  PATH="$VERT/bin:$PATH"

  export LUA_PATH
  export LUA_CPATH
  export PATH

  # This should detect bash and zsh, which have a hash command that must
  # be called to get it to forget past commands.  Without forgetting
  # past commands the $PATH changes we made may not be respected
  if [[ -n "$BASH" ]] || [[ -n "$ZSH_VERSION" ]] ; then
      hash -r
  fi
  ]=]

  local DIRECTORY          = opts[2]
  local LUAROCKS_VERSION   = opts["luarocks-version"]   or "2.0.8"
  local LUA_VERSION        = opts["lua-version"]        or "5.1.5"
  local LUA_IMPLIMENTATION = opts["lua-implimentation"] or "lua"
  local PLATFORM           = opts["platform"]           or "linux"
  local BUILD_DIR          = DIRECTORY.."/build/"

  if not I[LUA_IMPLIMENTATION] then
    print("invalid implimentation choice")
    os.exit(1)
  end

  if (not directory) or (#directory == 0) then
    print(help)
    os.exit(1)
  end

  local DIRECTORY = utils.expanddir(directory)

  if not utils.isdir(DIRECTORY) then
    lfs.mkdir(DIRECTORY)
  end

  if not utils.isdir(BUILD_DIR) then
    lfs.mkdir(BUILD_DIR)
  end

  print("installing ".. LUA_IMPLIMENTATION.." version: "..LUA_VERSION)

  I[LUA_IMPLIMENTATION].install(BUILD_DIR, LUA_VERSION, PLATFORM, DIRECTORY)

  M.install_luarocks(BUILD_DIR, LUAROCKS_VERSION, DIRECTORY)
  utils.write_activate_script(activate_template, LUA_VERSION:sub(1,3), DIRECTORY)

  print("ok")
end

return M.init
